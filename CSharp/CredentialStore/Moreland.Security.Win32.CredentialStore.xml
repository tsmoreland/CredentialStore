<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Moreland.Security.Win32.CredentialStore</name>
    </assembly>
    <members>
        <member name="T:Moreland.Security.Win32.CredentialStore.Credential">
            <summary>
            Credential Entity as populated by Win32 api
            </summary>
            <remarks>
            this entity does not store any attributes from the native credential, 
            any persist of this object will result in the loss of that data
            </remarks>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.Credential.#ctor(System.String,System.String,System.String,Moreland.Security.Win32.CredentialStore.CredentialFlag,Moreland.Security.Win32.CredentialStore.CredentialType,Moreland.Security.Win32.CredentialStore.CredentialPeristence,System.DateTime)">
            <summary>
            Instantiates a new instance of the <see cref="T:Moreland.Security.Win32.CredentialStore.Credential"/> class populated with the provided values
            </summary>
            <param name="id">unique id, maps to Target Name within Native Api</param>
            <param name="username">username</param>
            <param name="secret">secret to be stored securely by Native API</param>
            <param name="characteristics">typically <see cref="F:Moreland.Security.Win32.CredentialStore.CredentialFlag.None"/>, see Win32 CREDENTIAL type for more detail</param>
            <param name="type"><see cref="T:Moreland.Security.Win32.CredentialStore.CredentialType"/></param>
            <param name="persistanceType"><see cref="T:Moreland.Security.Win32.CredentialStore.CredentialPeristence"/></param>
            <param name="lastUpdated">last updated value, not used for newly saved values</param>
            <exception cref="T:System.ArgumentException">
            if <paramref name="id"/> is empty; or
            if <paramref name="type"/> is <see cref="F:Moreland.Security.Win32.CredentialStore.CredentialType.Unknown"/>; or
            if <paramref name="persistanceType"/> is <see cref="F:Moreland.Security.Win32.CredentialStore.CredentialPeristence.Unknown"/>
            </exception>
        </member>
        <member name="P:Moreland.Security.Win32.CredentialStore.Credential.Id">
            <summary>
            Unqiue Identifier, this represents the target name of the credential
            </summary>
        </member>
        <member name="P:Moreland.Security.Win32.CredentialStore.Credential.UserName">
            <summary>
            The user name of the account used to connect to <see cref="P:Moreland.Security.Win32.CredentialStore.Credential.Id"/> 
            </summary>
            <remarks>
            If the credential Type is <see cref="F:Moreland.Security.Win32.CredentialStore.CredentialType.DomainPassword"/>, 
            this member can be either a DomainName/UserName or a UPN.
            </remarks>
        </member>
        <member name="P:Moreland.Security.Win32.CredentialStore.Credential.Secret">
            <summary>
            Secret (password)
            </summary>
        </member>
        <member name="P:Moreland.Security.Win32.CredentialStore.Credential.Characteristics">
            <summary>
            <see cref="T:Moreland.Security.Win32.CredentialStore.CredentialFlag"/>
            </summary>
        </member>
        <member name="P:Moreland.Security.Win32.CredentialStore.Credential.Type">
            <summary>
            <see cref="T:Moreland.Security.Win32.CredentialStore.CredentialType"/>
            </summary>
        </member>
        <member name="P:Moreland.Security.Win32.CredentialStore.Credential.PeristenceType">
            <summary>
            <see cref="T:Moreland.Security.Win32.CredentialStore.CredentialType"/>
            </summary>
        </member>
        <member name="P:Moreland.Security.Win32.CredentialStore.Credential.LastUpdated">
            <summary>
            Last Updated time, only valid for reads
            </summary>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.Credential.Deconstruct(System.String@,System.String@,System.String@)">
            <summary>
            Deconstructs the object into <paramref name="id"/>, <paramref name="username"/>,
            and <paramref name="secret"/>
            </summary>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.Credential.With(System.String,System.String,System.String,System.Nullable{Moreland.Security.Win32.CredentialStore.CredentialFlag},System.Nullable{Moreland.Security.Win32.CredentialStore.CredentialType},System.Nullable{Moreland.Security.Win32.CredentialStore.CredentialPeristence},System.Nullable{System.DateTime})">
            <summary>
            Returns a copy of the current object populated with the provided values if non-null;
            otherwise values from the current instance
            </summary>
            <exception cref="T:System.ArgumentException">
            thrown by the constructor under the same conditions defined there
            </exception>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.Credential.ToString">
            <summary>
            <inheritdoc cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.Credential.Equals(Moreland.Security.Win32.CredentialStore.Credential)">
            <summary>
            <inheritdoc cref="M:System.IEquatable`1.Equals(`0)"/>
            </summary>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.Credential.Equals(System.Object)">
            <summary>
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.Credential.GetHashCode">
            <summary>
            <inheritdoc cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="T:Moreland.Security.Win32.CredentialStore.CredentialFlag">
            <summary>
            https://docs.microsoft.com/en-us/windows/win32/api/wincred/ns-wincred-credentiala
            see Flags of Credential structure
            </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.CredentialFlag.None">
            <summary>
            Empty or No Value, in this case the flag is ignored
            </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.CredentialFlag.PromptNow">
            <summary>
            Bit set if the credential does not persist the CredentialBlob and 
            the credential has not been written during this logon session. This 
            bit is ignored on input and is set automatically when queried.
            If Type is CRED_TYPE_DOMAIN_CERTIFICATE, the CredentialBlob is not 
            persisted across logon sessions because the PIN of a certificate is 
            very sensitive information. Indeed, when the credential is written 
            to credential manager, the PIN is passed to the CSP associated with 
            the certificate. The CSP will enforce a PIN retention policy 
            appropriate to the certificate.
            If Type is CRED_TYPE_DOMAIN_PASSWORD or CRED_TYPE_DOMAIN_CERTIFICATE, 
            an authentication package always fails an authentication attempt when 
            using credentials marked as CRED_FLAGS_PROMPT_NOW. The application 
            (typically through the key ring UI) prompts the user for the password. 
            The application saves the credential and retries the authentication. 
            Because the credential has been recently written, the authentication 
            package now gets a credential that is not marked as <see cref="F:Moreland.Security.Win32.CredentialStore.CredentialFlag.PromptNow"/>
            </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.CredentialFlag.UsernameTarget">
            <summary>
            Bit is set if this credential has a TargetName member set to the same 
            value as the UserName member. Such a credential is one designed to 
            store the CredentialBlob for a specific user. For more information, 
            see the CredMarshalCredential function.
            This bit can only be specified if Type is CRED_TYPE_DOMAIN_PASSWORD 
            or CRED_TYPE_DOMAIN_CERTIFICATE.
            </summary>
        </member>
        <member name="T:Moreland.Security.Win32.CredentialStore.CredentialManager">
            <summary>
            <inheritdoc cref="T:Moreland.Security.Win32.CredentialStore.ICredentialManager"/>
            </summary>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.CredentialManager.#ctor">
            <summary>
            Instantiates a new instance of the 
            <see cref="T:Moreland.Security.Win32.CredentialStore.CredentialManager"/> object
            </summary>
            <remarks>
            provided for convenience and will use default concrete types for otherwise injected services
            </remarks>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.CredentialManager.#ctor(Moreland.Security.Win32.CredentialStore.INativeInterop,Moreland.Security.Win32.CredentialStore.IErrorCodeToStringService)">
            <summary>
            Instantiates a new instance of the 
            <see cref="T:Moreland.Security.Win32.CredentialStore.CredentialManager"/> object
            </summary>
            <param name="nativeInterop">Win32 api wrappers</param>
            <param name="errorCodeToStringService">translates Win32 error codes to message</param>
            <exception cref="T:System.ArgumentNullException">
            if any of the provided arguments are null
            </exception>
        </member>
        <member name="P:Moreland.Security.Win32.CredentialStore.CredentialManager.Credentials">
            <summary>
            Returns all Credentials from the Users credential set
            </summary>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.CredentialManager.Find(System.String,Moreland.Security.Win32.CredentialStore.CredentialType)">
            <summary>
            Finds a credential with the given id value and optionally <see cref="T:Moreland.Security.Win32.CredentialStore.CredentialType"/>
            </summary>
            <param name="id">id of the credential to be found</param>
            <param name="type">
            <see cref="T:Moreland.Security.Win32.CredentialStore.CredentialType"/> of <see cref="T:Moreland.Security.Win32.CredentialStore.Credential"/> to be found, 
            by default <see cref="F:Moreland.Security.Win32.CredentialStore.CredentialType.DomainPassword"/>
            </param>
            <returns><see cref="T:Moreland.Security.Win32.CredentialStore.Credential"/> found or null</returns>
            <exception cref="T:System.ArgumentException">
            if <paramref name="id"/> is null or empty or if returned credential structure is malformed
            </exception>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.CredentialManager.Find(System.String,System.Boolean)">
            <summary>
            Returns all credentials matching wildcard based <paramref name="filter"/>
            </summary>
            <param name="filter">filter using wildcards</param>
            <param name="searchAll">if true all credentials are searched</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of credentials matching filter</returns>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.CredentialManager.Add(Moreland.Security.Win32.CredentialStore.Credential)">
            <summary>
            Adds <paramref name="credential"/> to Win32 
            Credential Manager
            </summary>
            <param name="credential">credential to be saved</param>
            <returns>true on success; otherwise, false</returns>
            <exception cref="T:System.ArgumentNullException">
            if <paramref name="credential"/> is null
            </exception>
            <exception cref="T:System.ArgumentException">
            if <see cref="P:Moreland.Security.Win32.CredentialStore.Credential.Id"/> or 
            <see cref="P:Moreland.Security.Win32.CredentialStore.Credential.UserName"/> are null or empty
            </exception>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.CredentialManager.Delete(Moreland.Security.Win32.CredentialStore.Credential)">
            <summary>
            deletes a credential from the user's credential set
            </summary>
            <param name="credential"></param>
            <returns>The function returns true on success and false</returns>
            <exception cref="T:System.ArgumentNullException">
            if <paramref name="credential"/> is null
            </exception>
            <exception cref="T:System.ArgumentException">
            if <paramref name="credential.Id.Id"/> is null or empty
            </exception>
            <exception cref="T:System.ComponentModel.Win32Exception">
            if error occurs calling native api
            </exception>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.CredentialManager.Delete(System.String,Moreland.Security.Win32.CredentialStore.CredentialType)">
            <summary>
            deletes a credential from the user's credential set
            </summary>
            <param name="id">id of item to be deleted</param>
            <param name="type">credential type of item to be deleted</param>
            <returns>true if item not found successfully deleted, otherwise false</returns>
            <exception cref="T:System.ArgumentException">
            if <paramref name="id"/> is null or empty
            </exception>
            <exception cref="T:System.ComponentModel.Win32Exception">
            if error occurs calling native api
            </exception>
        </member>
        <member name="T:Moreland.Security.Win32.CredentialStore.CredentialPeristence">
            <summary>
            https://docs.microsoft.com/en-us/windows/win32/api/wincred/ns-wincred-credentiala
            </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.CredentialPeristence.Unknown">
            <summary>
            provided to represent no selected value, should never be used in a new instance nor returned
            by a read instance
            </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.CredentialPeristence.Session">
            <summary>
            The credential persists for the life of the logon session. It will 
            not be visible to other logon sessions of this same user. It will 
            not exist after this user logs off and back on.
            </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.CredentialPeristence.LocalMachine">
             <summary>
             The credential persists for all subsequent logon sessions on this 
             same computer. It is visible to other logon sessions of this same 
             user on this same computer and not visible to logon sessions for 
             this user on other computers.  
            
             Windows Vista Home Basic, Windows Vista Home Premium, Windows 
             Vista Starter and Windows XP Home Edition:  
             This value is not supported.
             </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.CredentialPeristence.Enterprise">
             <summary>
             The credential persists for all subsequent logon sessions on this 
             same computer. It is visible to other logon sessions of this same 
             user on this same computer and to logon sessions for this user on 
             other computers.
             This option can be implemented as locally persisted credential if 
             the administrator or user configures the user account to not have 
             roam-able state. For instance, if the user has no roaming profile, 
             the credential will only persist locally.
            
             Windows Vista Home Basic, Windows Vista Home Premium, 
             Windows Vista Starter and Windows XP Home Edition:  
             This value is not supported.
             </summary>
        </member>
        <member name="T:Moreland.Security.Win32.CredentialStore.CredentialType">
            <summary>
            https://docs.microsoft.com/en-us/windows/win32/api/wincred/ns-wincred-credentiala
            see Type of Credential structure
            </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.CredentialType.Unknown">
            <summary>
            Should not be used by new Credentials or returned by a return cred, serves only
            to have a default value which is invalid
            </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.CredentialType.Generic">
            <summary>
            The credential is a generic credential. The credential will not be 
            used by any particular authentication package. The credential will 
            be stored securely but has no other significant characteristics.
            </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.CredentialType.DomainPassword">
            <summary>
            The credential is a password credential and is specific to 
            Microsoft's authentication packages. The NTLM, Kerberos, and 
            Negotiate authentication packages will automatically use this 
            credential when connecting to the named target.
            </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.CredentialType.DomainCertificate">
            <summary>
            The credential is a certificate credential and is specific to 
            Microsoft's authentication packages. The Kerberos, Negotiate, and 
            Schannel authentication packages automatically use this credential 
            when connecting to the named target.
            </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.CredentialType.DomainVisiblePassword">
            <summary>
            This value is no longer supported.
            Windows Server 2003 and Windows XP:  The credential is a password 
            credential and is specific to authentication packages from Microsoft. 
            The Passport authentication package will automatically use this credential 
            when connecting to the named target.
            Additional values will be defined in the future. Applications should be 
            written to allow for credential types they do not understand.
            </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.CredentialType.GenericCertificate">
            <summary>
            The credential is a certificate credential that is a generic 
            authentication package.
            Windows Server 2008, Windows Vista, Windows Server 2003 and /// Windows XP: This value is not supported.
            </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.CredentialType.DomainExtended">
            <summary>
            The credential is supported by extended Negotiate packages.
            Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  This value is not supported.
            </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.CredentialType.Maximum">
            <summary>
            The maximum number of supported credential types.
            Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  This value is not supported.
            </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.CredentialType.MaximumEx">
            <summary>
            The extended maximum number of supported credential types that now 
            allow new applications to run on older operating systems.
            Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  This value is not supported.
            </summary>
        </member>
        <member name="T:Moreland.Security.Win32.CredentialStore.ICredentialManager">
            <summary>
            Win32 Credential Manager (Credential Repository) providing CRUD 
            operations for Windows Credential Manager 
            </summary>
        </member>
        <member name="P:Moreland.Security.Win32.CredentialStore.ICredentialManager.Credentials">
            <summary>
            Returns all Credentials from the Users credential set
            </summary>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.ICredentialManager.Add(Moreland.Security.Win32.CredentialStore.Credential)">
            <summary>
            Adds <paramref name="credential"/> to Win32 
            Credential Manager
            </summary>
            <param name="credential">credential to be saved</param>
            <returns>true on success; otherwise, false</returns>
            <exception cref="T:System.ArgumentNullException">
            if <paramref name="credential"/> is null
            </exception>
            <exception cref="T:System.ArgumentException">
            if <see cref="P:Moreland.Security.Win32.CredentialStore.Credential.Id"/> or 
            <see cref="P:Moreland.Security.Win32.CredentialStore.Credential.UserName"/> are null or empty
            </exception>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.ICredentialManager.Delete(Moreland.Security.Win32.CredentialStore.Credential)">
            <summary>
            deletes a credential from the user's credential set
            </summary>
            <param name="credential"></param>
            <returns>The function returns true on success and false</returns>
            <exception cref="T:System.ArgumentNullException">
            if <paramref name="credential"/> is null
            </exception>
            <exception cref="T:System.ComponentModel.Win32Exception">
            if error occurs calling native api
            </exception>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.ICredentialManager.Delete(System.String,Moreland.Security.Win32.CredentialStore.CredentialType)">
            <summary>
            deletes a credential from the user's credential set
            </summary>
            <param name="id">id of item to be deleted</param>
            <param name="type">credential type of item to be deleted</param>
            <returns>true if item not found successfully deleted, otherwise false</returns>
            <exception cref="T:System.ArgumentException">
            if <paramref name="id"/> is null or empty
            </exception>
            <exception cref="T:System.ComponentModel.Win32Exception">
            if error occurs calling native api
            </exception>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.ICredentialManager.Find(System.String,Moreland.Security.Win32.CredentialStore.CredentialType)">
            <summary>
            Finds a credential with the given id value and optionally <see cref="T:Moreland.Security.Win32.CredentialStore.CredentialType"/>
            </summary>
            <param name="id">id of the credential to be found</param>
            <param name="type">
            <see cref="T:Moreland.Security.Win32.CredentialStore.CredentialType"/> of <see cref="T:Moreland.Security.Win32.CredentialStore.Credential"/> to be found, 
            by default <see cref="F:Moreland.Security.Win32.CredentialStore.CredentialType.DomainPassword"/>
            </param>
            <returns><see cref="T:Moreland.Security.Win32.CredentialStore.Credential"/> found or null</returns>
            <exception cref="T:System.ArgumentException">
            if <paramref name="id"/> is null or empty or if returned credential structure is malformed
            </exception>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.ICredentialManager.Find(System.String,System.Boolean)">
            <summary>
            Returns all credentials matching wildcard based <paramref name="filter"/>
            </summary>
            <param name="filter">filter using wildcards</param>
            <param name="searchAll">if true all credentials are searched</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of credentials matching filter</returns>
        </member>
        <member name="T:Moreland.Security.Win32.CredentialStore.IErrorCodeToStringService">
            <summary>
            converts Win32 error codes to string messages
            </summary>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.IErrorCodeToStringService.GetMessageFor(System.Int32)">
            <summary>
            Gets the error message for <paramref name="errorCode"/> if known,
            ottherwise generic error message
            </summary>
        </member>
        <member name="T:Moreland.Security.Win32.CredentialStore.ILoggerAdapter">
            <summary>
            Facade for Logging interface allowing allowing wrapping of external
            loggers 
            </summary>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.ILoggerAdapter.Error(System.String,System.Exception,System.String)">
            <summary>
            log an error
            </summary>
            <param name="message">message to log</param>
            <param name="exception">optional exception object</param>
            <param name="callerMemberName">
            method which called logger, /// implementors should decorate with 
            <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>
            </param>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.ILoggerAdapter.Warning(System.String,System.String)">
            <summary>
            log a warning 
            </summary>
            <param name="message">message to log</param>
            <param name="callerMemberName">
            method which called logger, /// implementors should decorate with 
            <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>
            </param>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.ILoggerAdapter.Info(System.String,System.String)">
            <summary>
            log informational message
            </summary>
            <param name="message">message to log</param>
            <param name="callerMemberName">
            method which called logger, /// implementors should decorate with 
            <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>
            </param>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.ILoggerAdapter.Verbose(System.String,System.String)">
            <summary>
            log verbose message
            </summary>
            <param name="message">message to log</param>
            <param name="callerMemberName">
            method which called logger, /// implementors should decorate with 
            <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>
            </param>
        </member>
        <member name="T:Moreland.Security.Win32.CredentialStore.INativeInterop">
            <summary>
            Wrapper around Native Credential Management functions which return the results to managed objects
            and/or errors as exceptions.
            </summary>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.INativeInterop.CredDelete(System.String,System.Int32,System.Int32)">
            <summary>
            deletes a credential from the users credential set
            </summary>
            <param name="target">
            Pointer to a null-terminated string that contains the name of the
            credential to delete.
            </param>
            <param name="type">
            Type of the credential to delete. Must be one of the
            <see cref="T:Moreland.Security.Win32.CredentialStore.CredentialType"/> defined types. For a list of the
            defined types, see the Type member of the <see cref="T:Moreland.Security.Win32.CredentialStore.NativeApi.Credential"/>
            structure.
            </param>
            <param name="flags">Reserved and must be zero.</param>
            <returns>
            0 on success; otherwise Win32 error code 
            </returns>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.INativeInterop.CredEnumerate(System.String,System.Int32)">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            matching <paramref name="filter"/> if non-null; otherwise
            unfilteredjj
            </summary>
            <param name="filter">
            Pointer to a null-terminated string that contains the filter for
            the returned credentials. Only credentials with a TargetName
            matching the filter will be returned. The filter specifies a name
            prefix followed by an asterisk. For instance, the filter "FRED*"
            will return all credentials with a TargetName beginning with the
            string "FRED".
            If null is specified, all credentials will be returned.
            </param>
            <param name="flag">
            The value of this parameter can be zero or more of
            <see cref="T:Moreland.Security.Win32.CredentialStore.NativeApi.EnumerateFlag"/> values combined with a bitwise-OR
            operation.
            </param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <exception cref="T:System.ComponentModel.Win32Exception">
            if unable to enumerate over credentials, retrieve a credential or
            free one that has been retrieved
            </exception>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.INativeInterop.CredFree(System.IntPtr)">
            <summary>
            Frees the buffer allocated by any of the credentials api functions.
            </summary>
            <param name="handle">Pointer to the buffer to be freed.</param>
            <returns>
            0 on success; otherwise Win32 error code 
            </returns>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.INativeInterop.CredRead(System.String,Moreland.Security.Win32.CredentialStore.CredentialType,System.Int32,Moreland.Security.Win32.CredentialStore.NativeApi.Credential@)">
            <summary>
            Returns <see cref="T:Moreland.Security.Win32.CredentialStore.NativeApi.Credential"/> containing the matching
            credential if found; otherwise, null
            </summary>
            <param name="target">
            Pointer to a null-terminated string that contains the name of the
            credential to read.
            </param>
            <param name="type">
            Type of the credential to read. Type must be one of the
            <see cref="T:Moreland.Security.Win32.CredentialStore.CredentialType"/> defined types.
            </param>
            <param name="reservedFlag">Currently reserved and must be zero.</param>
            <param name="credential">on success stores the found credential</param>
            <returns>
            0 on success; otherwise Win32 error code 
            </returns>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.INativeInterop.CredWrite(Moreland.Security.Win32.CredentialStore.NativeApi.Credential,System.Int32)">
            <summary>
            Creates or updates a credential
            </summary>
            <param name="credential">
            A pointer to the <see cref="T:Moreland.Security.Win32.CredentialStore.Credential"/> structure to be written.
            </param>
            <param name="flags">
            Flags that control the function's operation.
            <see cref="T:Moreland.Security.Win32.CredentialStore.NativeApi.PreserveFlag"/> for valid values.
            </param>
            <returns>
            0 on success; otherwise Win32 error code 
            </returns>
        </member>
        <member name="T:Moreland.Security.Win32.CredentialStore.NativeApi.Credential">
            <summary>
            https://docs.microsoft.com/en-us/windows/win32/api/wincred/ns-wincred-credentiala
            </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.NativeApi.Credential.Flags">
            <summary>
            A bit member that identifies characteristics of the credential. 
            Undefined bits should be initialized as zero and not otherwise 
            altered to permit future enhancement.
            <see cref="T:Moreland.Security.Win32.CredentialStore.CredentialFlag"/> for possible values
            </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.NativeApi.Credential.Type">
            <summary>
            The type of the credential. This member cannot be changed after 
            the credential is created. The following values are valid.
            <see cref="T:Moreland.Security.Win32.CredentialStore.CredentialType"/> for possible values
            </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.NativeApi.Credential.TargetName">
            <summary>
            The name of the credential. The <see cref="F:Moreland.Security.Win32.CredentialStore.NativeApi.Credential.TargetName"/> and 
            <see cref="F:Moreland.Security.Win32.CredentialStore.NativeApi.Credential.Type"/> members uniquely identify the credential. 
            This member cannot be changed after the credential is created. 
            Instead, the credential with the old name should be deleted 
            and the credential with the new name created.
            </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.NativeApi.Credential.Comment">
            <summary>
            A string comment from the user that describes this credential. This 
            member cannot be longer than 
            <see cref="F:Moreland.Security.Win32.CredentialStore.NativeApi.Limits.MaximumCredentialStringLength"/> characters.
            </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.NativeApi.Credential.LastWritten">
            <summary>
            The time, in Coordinated Universal Time (Greenwich Mean Time), of 
            the last modification of the credential. For write operations, the 
            value of this member is ignored.
            </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.NativeApi.Credential.CredentialBlobSize">
            <summary>
            The size, in bytes, of the CredentialBlob member. This member 
            cannot be larger than <see cref="F:Moreland.Security.Win32.CredentialStore.NativeApi.Limits.MaxCredentialBlobSize"/> bytes
            .</summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.NativeApi.Credential.CredentialBlob">
            <summary>
            Secret data for the credential. The CredentialBlob member can be 
            both read and written.
            </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.NativeApi.Credential.Persist">
            <summary>
            Defines the peristence of this credential. This member can be read and written
            <see cref="T:Moreland.Security.Win32.CredentialStore.CredentialPeristence"/> for possible values
            .</summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.NativeApi.Credential.AttributeCount">
            <summary>
            The number of application-defined attributes to be associated with 
            the credential. This member can be read and written. Its value 
            cannot be greater than CRED_MAX_ATTRIBUTES (64).
            </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.NativeApi.Credential.Attributes">
            <summary>
            Application-defined attributes that are associated with the 
            credential. This member can be read and written.
            </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.NativeApi.Credential.TargetAlias">
            <summary>
            Alias for the <see cref="F:Moreland.Security.Win32.CredentialStore.NativeApi.Credential.TargetName"/>  member. This member can be 
            read and written. It cannot be longer than 
            <see cref="F:Moreland.Security.Win32.CredentialStore.NativeApi.Limits.MaximumCredentialStringLength"/> characters.
            </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.NativeApi.Credential.UserName">
            <summary>
            The user name of the account used to connect to <see cref="F:Moreland.Security.Win32.CredentialStore.NativeApi.Credential.TargetName"/>.
            </summary>
        </member>
        <member name="T:Moreland.Security.Win32.CredentialStore.NativeApi.CriticalCredentialHandle">
            <summary>
            <see cref="T:System.IDisposable"/> handle to pinned structure which must be disposed or a memory leak
            will occur
            </summary>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.NativeApi.CriticalCredentialHandle.#ctor(System.IntPtr,Moreland.Security.Win32.CredentialStore.IErrorCodeToStringService,Moreland.Security.Win32.CredentialStore.ILoggerAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:Moreland.Security.Win32.CredentialStore.NativeApi.CriticalCredentialHandle"/> class.
            </summary>
            <param name="handle">handle to <see cref="T:Moreland.Security.Win32.CredentialStore.NativeApi.Credential"/></param>
            <param name="errorCodeToStringService">error code to string translation service</param>
            <param name="logger">logger</param>
        </member>
        <member name="P:Moreland.Security.Win32.CredentialStore.NativeApi.CriticalCredentialHandle.IsValid">
            <summary>
            Returns true if the underlying handle is valid
            </summary>
        </member>
        <member name="P:Moreland.Security.Win32.CredentialStore.NativeApi.CriticalCredentialHandle.NativeCredential">
            <summary>
            returns <see cref="T:Moreland.Security.Win32.CredentialStore.NativeApi.Credential"/> referenced by the handle if <see cref="P:Moreland.Security.Win32.CredentialStore.NativeApi.CriticalCredentialHandle.IsValid"/>
            otherwise null
            </summary>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.NativeApi.CriticalCredentialHandle.ReleaseHandle">
            <summary>
            Closes and sets the handle to invalid if valid; otherwise does nothing
            </summary>
            <returns><c>true</c> if successful; otherwise,k <c>false</c></returns>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.NativeApi.CriticalCredentialHandleFactory.#ctor(Moreland.Security.Win32.CredentialStore.IErrorCodeToStringService,Moreland.Security.Win32.CredentialStore.ILoggerAdapter)">
            <summary>
            Instantiates a new instance of the <see cref="T:Moreland.Security.Win32.CredentialStore.NativeApi.CriticalCredentialHandleFactory"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            if any of the provided arguments are null
            </exception>
        </member>
        <member name="T:Moreland.Security.Win32.CredentialStore.NativeApi.EnumerateFlag">
            <summary>
            Flags passed to <see cref="M:Moreland.Security.Win32.CredentialStore.NativeApi.NativeMethods.CredEnumerate(System.String,System.Int32,System.Int32@,System.IntPtr@)"/>
            <a href="https://docs.microsoft.com/en-us/windows/win32/api/wincred/nf-wincred-credenumeratew">Win32 CredEnumerateW</a>
            </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.NativeApi.EnumerateFlag.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.NativeApi.EnumerateFlag.EnumerateAllCredentials">
            <summary>
            This function enumerates all of the credentials in the user's
            credential set. The target name of each credential is returned in
            the "namespace:attribute=target" format. If this flag is set and
            the Filter parameter is not NULL, the function fails and returns
            <see cref="F:Moreland.Security.Win32.CredentialStore.NativeApi.ExpectedError.InvalidFlags"/>
            </summary>
        </member>
        <member name="T:Moreland.Security.Win32.CredentialStore.NativeApi.ErrorCodeToStringService">
            <summary>
            <inheritdoc cref="T:Moreland.Security.Win32.CredentialStore.IErrorCodeToStringService"/>
            </summary>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.NativeApi.ErrorCodeToStringService.#ctor(Moreland.Security.Win32.CredentialStore.ILoggerAdapter)">
            <summary>
            Instantiates a new instance of the <see cref="T:Moreland.Security.Win32.CredentialStore.IErrorCodeToStringService"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            if any argument is null
            </exception>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.NativeApi.ErrorCodeToStringService.GetMessageFor(Moreland.Security.Win32.CredentialStore.NativeApi.ExpectedError)">
            <summary>
            <inheritdoc cref="M:Moreland.Security.Win32.CredentialStore.IErrorCodeToStringService.GetMessageFor(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.NativeApi.ErrorCodeToStringService.GetMessageFor(System.Int32)">
            <summary>
            <inheritdoc cref="M:Moreland.Security.Win32.CredentialStore.IErrorCodeToStringService.GetMessageFor(System.Int32)"/>
            </summary>
        </member>
        <member name="T:Moreland.Security.Win32.CredentialStore.NativeApi.ExpectedError">
            <summary>
            Expected Win32 error codes
            </summary>
        </member>
        <member name="T:Moreland.Security.Win32.CredentialStore.NativeApi.ICriticalCredentialHandle">
            <summary>
            providing access to <see cref="T:Moreland.Security.Win32.CredentialStore.NativeApi.Credential"/> if handle <see cref="P:Moreland.Security.Win32.CredentialStore.NativeApi.ICriticalCredentialHandle.IsValid"/> is <c>true</c>
            </summary>
        </member>
        <member name="P:Moreland.Security.Win32.CredentialStore.NativeApi.ICriticalCredentialHandle.IsValid">
            <summary>
            Returns true if the underlying handle is valid
            </summary>
        </member>
        <member name="P:Moreland.Security.Win32.CredentialStore.NativeApi.ICriticalCredentialHandle.NativeCredential">
            <summary>
            returns <see cref="T:Moreland.Security.Win32.CredentialStore.NativeApi.Credential"/> referenced by the handle if <see cref="P:Moreland.Security.Win32.CredentialStore.NativeApi.ICriticalCredentialHandle.IsValid"/>
            otherwise null
            </summary>
        </member>
        <member name="T:Moreland.Security.Win32.CredentialStore.NativeApi.IntermediateCredential">
            <summary>
            Managed Wrapper around <see cref="T:Moreland.Security.Win32.CredentialStore.NativeApi.Credential"/> managing the memory allocated
            to created to convert from <see cref="T:Moreland.Security.Win32.CredentialStore.Credential"/>
            </summary>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.NativeApi.IntermediateCredential.#ctor(Moreland.Security.Win32.CredentialStore.Credential)">
            <summary>
            Instantiates a new instance of the 
            <see cref="T:Moreland.Security.Win32.CredentialStore.NativeApi.IntermediateCredential"/> class.
            </summary>
            <param name="credential">
            <see cref="T:Moreland.Security.Win32.CredentialStore.Credential"/> to be converted to 
            <see cref="T:Moreland.Security.Win32.CredentialStore.NativeApi.Credential"/>
            </param>
            <exception cref="T:System.ArgumentNullException">
            if <paramref name="credential"/> is null
            </exception>
            <exception cref="T:System.ArgumentException">
            if <see cref="P:Moreland.Security.Win32.CredentialStore.Credential.Id"/> or 
            <see cref="P:Moreland.Security.Win32.CredentialStore.Credential.UserName"/> are null or empty
            </exception>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.NativeApi.IntermediateCredential.Finalize">
            <summary>Finalize</summary>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.NativeApi.IntermediateCredential.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.NativeApi.IntermediateCredential.Dispose(System.Boolean)">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
            <param name="disposing">if <c>true</c> then release managed resources in addition to unmanaged</param>
        </member>
        <member name="T:Moreland.Security.Win32.CredentialStore.NativeApi.Limits">
            <summary>
            Limits as defined in documentation for Win32 Credential API 
            https://docs.microsoft.com/en-us/windows/win32/api/wincred/ns-wincred-credentiala
            see wincred.h for more details
            </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.NativeApi.Limits.MaximumUserNameLength">
            <summary>
            Username can be in domain\user or user@domain
            Length in characters, not including nul termination.
            </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.NativeApi.Limits.MaximumPasswordLength">
            <summary>
            Win32 definition CREDUI_MAX_PASSWORD_LENGTH
            </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.NativeApi.Limits.MaximumCredentialStringLength">
            <summary>
            Maximum length of the various credential string fields (in characters)
            </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.NativeApi.Limits.MaxCredentialBlobSize">
            <summary>
            Maximum size of the CredBlob field (in bytes)
            </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.NativeApi.Limits.MaxCaptionLength">
            <summary>
            CREDUI_MAX_CAPTION_LENGTH
            </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.NativeApi.Limits.MaxAttributes">
            <summary>
            CRED_MAX_ATTRIBUTES
            </summary>
        </member>
        <member name="T:Moreland.Security.Win32.CredentialStore.NativeApi.NativeInterop">
            <summary>
            <inheritdoc cref="T:Moreland.Security.Win32.CredentialStore.INativeInterop"/>
            </summary>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.NativeApi.NativeInterop.#ctor(Moreland.Security.Win32.CredentialStore.NativeApi.ICriticalCredentialHandleFactory)">
            <summary>
            Instantiates a new instance of the <see cref="T:Moreland.Security.Win32.CredentialStore.NativeApi.NativeInterop"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            if any of the provided arguments are null
            </exception>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.NativeApi.NativeInterop.CredRead(System.String,Moreland.Security.Win32.CredentialStore.CredentialType,System.Int32,Moreland.Security.Win32.CredentialStore.NativeApi.Credential@)">
            <summary>
            <inheritdoc cref="M:Moreland.Security.Win32.CredentialStore.INativeInterop.CredRead(System.String,Moreland.Security.Win32.CredentialStore.CredentialType,System.Int32,Moreland.Security.Win32.CredentialStore.NativeApi.Credential@)"/>
            </summary>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.NativeApi.NativeInterop.CredWrite(Moreland.Security.Win32.CredentialStore.NativeApi.Credential,System.Int32)">
            <summary>
            <inheritdoc cref="M:Moreland.Security.Win32.CredentialStore.INativeInterop.CredWrite(Moreland.Security.Win32.CredentialStore.NativeApi.Credential,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.NativeApi.NativeInterop.CredDelete(System.String,System.Int32,System.Int32)">
            <summary>
            <inheritdoc cref="M:Moreland.Security.Win32.CredentialStore.INativeInterop.CredDelete(System.String,System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.NativeApi.NativeInterop.CredEnumerate(System.String,System.Int32)">
            <summary>
            <inheritdoc cref="M:Moreland.Security.Win32.CredentialStore.INativeInterop.CredEnumerate(System.String,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.NativeApi.NativeInterop.CredFree(System.IntPtr)">
            <summary>
            <inheritdoc cref="M:Moreland.Security.Win32.CredentialStore.INativeInterop.CredFree(System.IntPtr)"/>
            </summary>
        </member>
        <member name="T:Moreland.Security.Win32.CredentialStore.NativeApi.PreserveFlag">
            <summary>
            Flags used as parameter in <see cref="M:Moreland.Security.Win32.CredentialStore.NativeApi.NativeMethods.CredWrite(System.IntPtr,System.Int32)"/>
            https://docs.microsoft.com/en-us/windows/win32/api/wincred/nf-wincred-credwritew
            </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.NativeApi.PreserveFlag.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Moreland.Security.Win32.CredentialStore.NativeApi.PreserveFlag.PreserveCredentialBlob">
            <summary>
            The credential BLOB from an existing credential is preserved with
            the same credential name and credential type. The CredentialBlobSize
            of the passed in Credential structure must be zero.
            </summary>
        </member>
        <member name="T:Moreland.Security.Win32.CredentialStore.NullLoggerAdapter">
            <summary>
            <inheritdoc cref="T:Moreland.Security.Win32.CredentialStore.ILoggerAdapter"/>
            </summary>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.NullLoggerAdapter.Error(System.String,System.Exception,System.String)">
            <inheritdoc cref="M:Moreland.Security.Win32.CredentialStore.ILoggerAdapter.Error(System.String,System.Exception,System.String)"/>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.NullLoggerAdapter.Info(System.String,System.String)">
            <inheritdoc cref="M:Moreland.Security.Win32.CredentialStore.ILoggerAdapter.Info(System.String,System.String)"/>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.NullLoggerAdapter.Verbose(System.String,System.String)">
            <inheritdoc cref="M:Moreland.Security.Win32.CredentialStore.ILoggerAdapter.Verbose(System.String,System.String)"/>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.NullLoggerAdapter.Warning(System.String,System.String)">
            <inheritdoc cref="M:Moreland.Security.Win32.CredentialStore.ILoggerAdapter.Warning(System.String,System.String)"/>
        </member>
        <member name="T:Moreland.Security.Win32.CredentialStore.TraceLoggerAdapter">
            <summary>
            <inheritdoc cref="T:Moreland.Security.Win32.CredentialStore.ILoggerAdapter"/>
            </summary>
        </member>
        <member name="P:Moreland.Security.Win32.CredentialStore.TraceLoggerAdapter.DiagnosticsLogger">
            <summary>
            Singleton instance of Diagnostics logger used if no other logger is provided
            </summary>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.TraceLoggerAdapter.Error(System.String,System.Exception,System.String)">
            <summary>
            <inheritdoc cref="M:Moreland.Security.Win32.CredentialStore.ILoggerAdapter.Error(System.String,System.Exception,System.String)"/>
            </summary>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.TraceLoggerAdapter.Info(System.String,System.String)">
            <summary>
            <inheritdoc cref="M:Moreland.Security.Win32.CredentialStore.ILoggerAdapter.Info(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.TraceLoggerAdapter.Verbose(System.String,System.String)">
            <summary>
            <inheritdoc cref="M:Moreland.Security.Win32.CredentialStore.ILoggerAdapter.Verbose(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Moreland.Security.Win32.CredentialStore.TraceLoggerAdapter.Warning(System.String,System.String)">
            <summary>
            <inheritdoc cref="M:Moreland.Security.Win32.CredentialStore.ILoggerAdapter.Warning(System.String,System.String)"/>
            </summary>
        </member>
    </members>
</doc>
